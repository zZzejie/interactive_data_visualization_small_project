{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Plotly from 'plotly.js/dist/plotly';\nexport default {\n  name: \"BarChart\",\n  props: [\"selectedCategory\", \"selectedCompany\", \"averageEmployeeCount\"],\n  data: () => ({\n    BarChartData: {\n      x: [],\n      y: [],\n      name: [],\n      color: []\n    },\n    categoryColors: {\n      // Define colors for each category\n      bank: '#3498db',\n      // blue\n      tech: '#2ecc71',\n      // green\n      health: '#e74c3c' // red\n    }\n  }),\n\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    async fetchData() {\n      // req URL to retrieve companies from backend\n      var reqUrl = 'http://127.0.0.1:5000/companies?category=' + this.$props.selectedCategory;\n      console.log('ReqURL ' + reqUrl);\n      // await response and data\n      const response = await fetch(reqUrl);\n      const responseData = await response.json();\n      responseData.forEach(company => {\n        const categoryColor = this.categoryColors[company.category] || '#000000'; // Get the color for the category or black if not defined\n        this.BarChartData.name.push(company.name);\n        this.BarChartData.x.push(company.name);\n        this.BarChartData.y.push(company.employees);\n        this.BarChartData.color.push(categoryColor); // push the color to the color array for each company\n      });\n      // after the data is loaded, draw the plot\n      this.drawBarChart();\n    },\n    drawBarChart() {\n      // Calculate the average employee count for the category\n      const averageEmployeeCount = this.calculateAverageEmployeeCount(this.BarChartData.y);\n      var trace1 = {\n        x: this.BarChartData.x,\n        y: this.BarChartData.y,\n        mode: 'markers',\n        type: 'bar',\n        // Change the type to bar\n        // text: this.BarChartData.name,\n        // marker: {\n        //   color: this.BarChartData.color,  // Use the color data for markers\n        //   size: 12\n        // },\n        marker: {\n          color: this.BarChartData.color() // set color for bars\n          // opacity: 0.7\n        },\n\n        legendgroup: 'Companies',\n        name: \"\" // Remove the trace name\n      };\n\n      var trace2 = {\n        x: this.BarChartData.x,\n        y: Array(this.BarChartData.x.length).fill(averageEmployeeCount),\n        // Array of average values for the average line\n        type: 'scatter',\n        // Change to 'scatter' type\n        mode: 'lines',\n        // Set mode to 'lines' to remove markers\n        line: {\n          color: '#e74c3c',\n          // Red color for the average line\n          width: 2\n        },\n        legendgroup: 'Average',\n        name: 'Average employees',\n        hovertemplate: 'Average number: %{y} <extra></extra>' // use <extra> tag to remove the trace name from the hover label\n      };\n      // Call a method after creating the plot which is responsible to handle the click events.\n      var data = [trace1, trace2];\n      var layout = {\n        // Add axis titles\n        xaxis: {\n          title: 'Companies',\n          showgrid: false,\n          zeroline: false\n        },\n        yaxis: {\n          title: 'Number of Employees',\n          showline: false\n        },\n        showlegend: false,\n        // Hide the legend\n        // Add legend settings to the layout object\n        // legend: {\n        //   tracegroupgap: 10,  // Gap between legend entries\n        //   itemsizing: 'constant'  // Legend item size is constan\n        // },\n        margin: {\n          b: 180 // Adjust this value to move the x-axis label lower\n        }\n      };\n\n      var config = {\n        responsive: true,\n        displayModeBar: false\n      };\n      Plotly.newPlot('myBarChart', data, layout, config);\n      this.clickBarChart();\n    },\n    // Calculate the average employee count for the category\n    calculateAverageEmployeeCount(employeeCounts) {\n      const total = employeeCounts.reduce((acc, count) => acc + count, 0);\n      return total / employeeCounts.length;\n    },\n    // Upon a click, retrieve the point number and then emit an event with (pn+1 = company id).\n    // Emitting an event will notify the parent (configuration panel) that the selected company has changed.\n    // Then, revert all colors to black in case of previous clicks and change the current selection to blue.\n    // Then, call the Plotly. restyle function to update the plot.\n    clickBarChart() {\n      // var pn = 0\n      var that = this;\n      var myPlot = document.getElementById('myBarChart');\n      myPlot.on('plotly_click', function (data) {\n        for (var i = 0; i < data.points.length; i++) {\n          // get the index of point\n          // pn = data.points[i].pointNumber;\n\n          // Get the index of point and retrieve the associated company name\n          var pn = data.points[i].pointNumber;\n          var companyName = that.BarChartData.name[pn];\n\n          // emit event to change the currently selected company in the\n          // a) configuration panel\n          // and b) update the Profit View\n          that.$emit('changeCurrentlySelectedCompany', companyName);\n\n          // revert all colors\n          var colors = ['#00000' * 15];\n\n          // and change currently selected color to blue\n          colors[pn] = '#3777ee';\n\n          // update the marker and plot\n          var update = {\n            'marker': {\n              color: colors,\n              size: 12\n            }\n          };\n          Plotly.restyle('myBarChart', update);\n        }\n      });\n    }\n  },\n  watch: {\n    selectedCategory: function () {\n      this.BarChartData.x = [];\n      this.BarChartData.y = [];\n      this.fetchData();\n    }\n  }\n};","map":{"version":3,"names":["Plotly","name","props","data","BarChartData","x","y","color","categoryColors","bank","tech","health","mounted","fetchData","methods","reqUrl","$props","selectedCategory","console","log","response","fetch","responseData","json","forEach","company","categoryColor","category","push","employees","drawBarChart","averageEmployeeCount","calculateAverageEmployeeCount","trace1","mode","type","marker","legendgroup","trace2","Array","length","fill","line","width","hovertemplate","layout","xaxis","title","showgrid","zeroline","yaxis","showline","showlegend","margin","b","config","responsive","displayModeBar","newPlot","clickBarChart","employeeCounts","total","reduce","acc","count","that","myPlot","document","getElementById","on","i","points","pn","pointNumber","companyName","$emit","colors","update","size","restyle","watch"],"sources":["/Users/zoe/Desktop/IVDA/Assignments/example-project/hello-world/services/frontend/src/components/BarChart.vue"],"sourcesContent":["<template>\n  <div>\n    <v-row align=\"center\" justify=\"center\" class=\"mt-1 mb-0\">\n      <h3>Size Comparison in {{ $props.selectedCategory }} Companies</h3>\n    </v-row>\n    <div style=\"height: 90vh\">\n      <div id='myBarChart' style=\"height: inherit\"></div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Plotly from 'plotly.js/dist/plotly';\nexport default {\n  name: \"BarChart\",\n  props: [\"selectedCategory\", \"selectedCompany\", \"averageEmployeeCount\"],\n  data: () => ({\n    BarChartData: {x: [], y: [], name: [], color: []},\n\n    categoryColors: { // Define colors for each category\n      bank: '#3498db',   // blue\n      tech: '#2ecc71',   // green\n      health: '#e74c3c'  // red\n    }\n  }),\n  mounted() {\n    this.fetchData()\n  },\n  methods: {\n    async fetchData() {\n      // req URL to retrieve companies from backend\n      var reqUrl = 'http://127.0.0.1:5000/companies?category=' + this.$props.selectedCategory\n      console.log('ReqURL ' + reqUrl)\n      // await response and data\n      const response = await fetch(reqUrl)\n      const responseData = await response.json();\n\n      responseData.forEach((company) => {\n        const categoryColor = this.categoryColors[company.category] || '#000000'; // Get the color for the category or black if not defined\n        this.BarChartData.name.push(company.name);\n        this.BarChartData.x.push(company.name);\n        this.BarChartData.y.push(company.employees);\n        this.BarChartData.color.push(categoryColor); // push the color to the color array for each company\n      });\n      // after the data is loaded, draw the plot\n      this.drawBarChart()\n    },\n    drawBarChart() {\n      // Calculate the average employee count for the category\n      const averageEmployeeCount = this.calculateAverageEmployeeCount(this.BarChartData.y);\n\n      var trace1 = {\n        x: this.BarChartData.x,\n        y: this.BarChartData.y,\n        mode: 'markers',\n        type: 'bar', // Change the type to bar\n        // text: this.BarChartData.name,\n        // marker: {\n        //   color: this.BarChartData.color,  // Use the color data for markers\n        //   size: 12\n        // },\n        marker: {\n          color: this.BarChartData.color(), // set color for bars\n          // opacity: 0.7\n        },\n\n        legendgroup: 'Companies',\n        name: \"\", // Remove the trace name\n\n      };\n      var trace2 = {\n        x: this.BarChartData.x,\n        y: Array(this.BarChartData.x.length).fill(averageEmployeeCount), // Array of average values for the average line\n        type: 'scatter',  // Change to 'scatter' type\n        mode: 'lines',    // Set mode to 'lines' to remove markers\n        line: {\n          color: '#e74c3c', // Red color for the average line\n          width: 2\n        },\n        legendgroup: 'Average',\n        name: 'Average employees',\n        hovertemplate: 'Average number: %{y} <extra></extra>' // use <extra> tag to remove the trace name from the hover label\n      };\n      // Call a method after creating the plot which is responsible to handle the click events.\n      var data = [trace1, trace2];\n      var layout = {\n        // Add axis titles\n        xaxis: {\n          title: 'Companies',\n          showgrid: false,\n          zeroline: false\n        },\n        yaxis: {\n          title: 'Number of Employees',\n          showline: false\n        },\n        showlegend:false,  // Hide the legend\n        // Add legend settings to the layout object\n        // legend: {\n        //   tracegroupgap: 10,  // Gap between legend entries\n        //   itemsizing: 'constant'  // Legend item size is constan\n        // },\n        margin: {\n          b: 180  // Adjust this value to move the x-axis label lower\n        },\n      };\n      var config = {responsive: true, displayModeBar: false}\n      Plotly.newPlot('myBarChart', data, layout, config);\n      this.clickBarChart()\n    },\n\n    // Calculate the average employee count for the category\n    calculateAverageEmployeeCount(employeeCounts) {\n      const total = employeeCounts.reduce((acc, count) => acc + count, 0);\n      return total / employeeCounts.length;\n    },\n\n    // Upon a click, retrieve the point number and then emit an event with (pn+1 = company id).\n    // Emitting an event will notify the parent (configuration panel) that the selected company has changed.\n    // Then, revert all colors to black in case of previous clicks and change the current selection to blue.\n    // Then, call the Plotly. restyle function to update the plot.\n    clickBarChart() {\n      // var pn = 0\n      var that = this\n      var myPlot = document.getElementById('myBarChart')\n      myPlot.on('plotly_click', function (data) {\n        for (var i = 0; i < data.points.length; i++) {\n\n          // get the index of point\n          // pn = data.points[i].pointNumber;\n\n\n          // Get the index of point and retrieve the associated company name\n          var pn = data.points[i].pointNumber;\n          var companyName = that.BarChartData.name[pn];\n\n          // emit event to change the currently selected company in the\n          // a) configuration panel\n          // and b) update the Profit View\n          that.$emit('changeCurrentlySelectedCompany', companyName)\n\n          // revert all colors\n          var colors = ['#00000' * 15]\n\n          // and change currently selected color to blue\n          colors[pn] = '#3777ee';\n\n          // update the marker and plot\n          var update = {'marker': {color: colors, size: 12}};\n          Plotly.restyle('myBarChart', update);\n        }\n      });\n    }\n  },\n  watch: {\n    selectedCategory: function () {\n      this.BarChartData.x = [];\n      this.BarChartData.y = [];\n\n      this.fetchData();\n    }\n  }\n}\n</script>\n\n\n<style scoped>\n\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}