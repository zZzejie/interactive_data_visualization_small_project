{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"height\": \"90vh\"\n  }\n}, [/*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"myLinePlot\",\n  style: {\n    \"height\": \"inherit\"\n  }\n})], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_row = _resolveComponent(\"v-row\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_v_row, {\n    align: \"center\",\n    justify: \"center\",\n    class: \"mt-1 mb-0\"\n  }, {\n    default: _withCtx(() => [_createElementVNode(\"h3\", null, \"Profit View of Company: \" + _toDisplayString(_ctx.$props.selectedCompany), 1 /* TEXT */)]),\n\n    _: 1 /* STABLE */\n  }), _hoisted_1]);\n}","map":{"version":3,"names":["_createElementVNode","style","id","_createElementBlock","_createVNode","_component_v_row","align","justify","class","_toDisplayString","_ctx","$props","selectedCompany","_hoisted_1"],"sources":["/Users/zoe/Desktop/IVDA/Assignments/example-project/hello-world/services/frontend/src/components/LinePlot.vue"],"sourcesContent":["<template>\n  <div>\n    <v-row align=\"center\" justify=\"center\" class=\"mt-1 mb-0\">\n      <h3>Profit View of Company: {{ $props.selectedCompany }}</h3>\n    </v-row>\n    <div style=\"height: 90vh\">\n      <div id='myLinePlot' style=\"height: inherit\"></div>\n    </div>\n  </div>\n</template>\n\n\n\n\n<script>\nimport Plotly from 'plotly.js/dist/plotly';\nexport default {\n  name: \"LinePlot\",\n  props: [\"selectedCompany\", \"selectedAlgorithm\"],\n  data: () => ({\n    LinePlotData: {x: [], y: [], color: [], symbol: []},\n  }),\n  mounted() {\n    this.fetchData()\n  },\n  methods: {\n    async fetchData() {\n      // req URL to retrieve single company from backend\n      var reqUrl = 'http://127.0.0.1:5000/companies/' + this.$props.selectedCompany +\n          '?algorithm=' + this.$props.selectedAlgorithm\n      console.log(\"ReqURL \" + reqUrl)\n\n      // await response and data\n      const response = await fetch(reqUrl)\n      const responseData = await response.json();\n\n      // transform data to usable by lineplot\n      responseData.profit.forEach((profit) => {\n        this.LinePlotData.x.push(profit.year)\n        this.LinePlotData.y.push(profit.value)\n      })\n\n      // assign color and symbol based on year\n      this.LinePlotData.x.forEach((year) => {\n        switch (year) {\n          case 2022:\n            this.LinePlotData.color.push(\"#DC4C64\")\n            this.LinePlotData.symbol.push(\"star-diamond\")\n            break;\n          default:\n            this.LinePlotData.color.push(\"#3B71CAFF\")\n            this.LinePlotData.symbol.push(\"circle\")\n        }\n      })\n\n      // draw the lineplot after the data is transformed\n      this.drawLinePlot()\n    },\n\n    refetchData() {\n      this.LinePlotData.x = [];\n      this.LinePlotData.y = [];\n      this.LinePlotData.color = [];\n      this.LinePlotData.symbol = [];\n      this.fetchData();\n    },\n\n    drawLinePlot() {\n      var trace = {\n        x: this.LinePlotData.x,\n        y: this.LinePlotData.y,\n        type: 'scatter',\n        mode: 'lines+markers',\n        marker:\n            {\n              color: this.LinePlotData.color,\n              symbol: this.LinePlotData.symbol,\n              size: 10\n            },\n        hovertemplate: (this.LinePlotData.x === 2022 ? \"estimate\": \"\") + \"%{x}: %{y}\"\n      };\n        // line: {\n        //   color: this.LinePlotData.x.map((year) => {\n        //     // Check if the year is 2022, mark it as red, otherwise, use blue\n        //     return year === 2022 ? '#DC4C64' : (year > 2021 ? '#DC4C64' : '#3B71CA');\n        //   }),\n        //   width: 2\n        // }\n      // };\n\n      // Iterate through x-axis data and change the color for the specified segment\n      for (let i = 0; i < this.LinePlotData.x.length - 1; i++) {\n        if (this.LinePlotData.x[i] === 2021 && this.LinePlotData.x[i + 1] === 2022) {\n          trace1.line = {color: 'red'}; // Set the color of the segment from 2021 to 2022 to red\n          break;\n        }\n      }\n\n      var data = [trace];\n\n      var layout = {\n        // add axis titles\n        xaxis: {\n          title: 'Years',\n          showgrid: false,\n          zeroline: false\n        },\n        yaxis: {\n          title: 'Profit',\n          showline: false\n        }\n      };\n\n      var config = { responsive: true, displayModeBar: false };\n      Plotly.newPlot('myLinePlot', data, layout, config);\n    }\n\n\n\n  },\n  watch: {\n    selectedCompany() {\n      this.LinePlotData.x = [];\n      this.LinePlotData.y = [];\n\n      this.fetchData();\n    },\n    selectedAlgorithm() {\n      // this.LinePlotData.x = [];\n      // this.LinePlotData.y = [];\n      //\n      // this.fetchData();\n      // this.drawLinePlot(); // Update the plot when the algorithm changes\n      this.refetchData();\n    },\n  }\n}\n</script>\n\n\n\n\n<style scoped>\n\n</style>"],"mappings":";gCAKIA,mBAAA,CAEM;EAFDC,KAAoB,EAApB;IAAA;EAAA;AAAoB,I,aACvBD,mBAAA,CAAmD;EAA9CE,EAAE,EAAC,YAAY;EAACD,KAAuB,EAAvB;IAAA;EAAA;;;;;uBALzBE,mBAAA,CAOM,cANJC,YAAA,CAEQC,gBAAA;IAFDC,KAAK,EAAC,QAAQ;IAACC,OAAO,EAAC,QAAQ;IAACC,KAAK,EAAC;;sBAC3C,MAA6D,CAA7DR,mBAAA,CAA6D,YAAzD,0BAAwB,GAAAS,gBAAA,CAAGC,IAAA,CAAAC,MAAM,CAACC,eAAe,iB;;;MAEvDC,UAEM,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}