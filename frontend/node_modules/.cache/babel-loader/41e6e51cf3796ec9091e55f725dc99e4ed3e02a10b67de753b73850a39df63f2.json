{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Plotly from 'plotly.js/dist/plotly';\nexport default {\n  name: \"LinePlot\",\n  props: [\"selectedCompany\", \"selectedAlgorithm\"],\n  data: () => ({\n    LinePlotData: {\n      x: [],\n      y: []\n    }\n  }),\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    async fetchData() {\n      // req URL to retrieve single company from backend\n      var reqUrl = 'http://127.0.0.1:5000/companies/' + this.$props.selectedCompany + '?algorithm=' + this.$props.selectedAlgorithm;\n      console.log(\"ReqURL \" + reqUrl);\n      // await response and data\n      const response = await fetch(reqUrl);\n      const responseData = await response.json();\n      // transform data to usable by lineplot\n      responseData.profit.forEach(profit => {\n        this.LinePlotData.x.push(profit.year);\n        this.LinePlotData.y.push(profit.value);\n      });\n      // draw the lineplot after the data is transformed\n      this.drawLinePlot();\n    },\n    drawLinePlot() {\n      // add axis titles\n      var trace1 = {\n        x: this.LinePlotData.x,\n        y: this.LinePlotData.y,\n        type: 'scatter'\n      };\n      var data = [trace1];\n      var layout = {\n        xaxis: {\n          title: 'Years',\n          showgrid: false,\n          zeroline: false\n        },\n        yaxis: {\n          title: 'Profit',\n          showline: false\n        }\n      };\n      var config = {\n        responsive: true,\n        displayModeBar: false\n      };\n      Plotly.newPlot('myLinePlot', data, layout, config);\n    }\n  },\n  watch: {\n    selectedCompany() {\n      this.LinePlotData.x = [];\n      this.LinePlotData.y = [];\n      this.fetchData();\n    },\n    selectedAlgorithm() {\n      this.LinePlotData.x = [];\n      this.LinePlotData.y = [];\n      this.fetchData();\n    }\n  }\n};","map":{"version":3,"names":["Plotly","name","props","data","LinePlotData","x","y","mounted","fetchData","methods","reqUrl","$props","selectedCompany","selectedAlgorithm","console","log","response","fetch","responseData","json","profit","forEach","push","year","value","drawLinePlot","trace1","type","layout","xaxis","title","showgrid","zeroline","yaxis","showline","config","responsive","displayModeBar","newPlot","watch"],"sources":["/Users/zoe/Desktop/example-project/hello-world/services/frontend/src/components/LinePlot.vue"],"sourcesContent":["<template>\n  <div>\n    <v-row align=\"center\" justify=\"center\" class=\"mt-1 mb-0\">\n      <h3>Profit View of Company: {{ $props.selectedCompany }}</h3>\n    </v-row>\n    <div style=\"height: 90vh\">\n      <div id='myLinePlot' style=\"height: inherit\"></div>\n    </div>\n  </div>\n</template>\n\n\n\n\n<script>\nimport Plotly from 'plotly.js/dist/plotly';\nexport default {\n  name: \"LinePlot\",\n  props: [\"selectedCompany\", \"selectedAlgorithm\"],\n  data: () => ({\n    LinePlotData: {x: [], y: []}\n  }),\n  mounted() {\n    this.fetchData()\n  },\n  methods: {\n    async fetchData() {\n      // req URL to retrieve single company from backend\n      var reqUrl = 'http://127.0.0.1:5000/companies/' + this.$props.selectedCompany +\n          '?algorithm=' + this.$props.selectedAlgorithm\n      console.log(\"ReqURL \" + reqUrl)\n      // await response and data\n      const response = await fetch(reqUrl)\n      const responseData = await response.json();\n      // transform data to usable by lineplot\n      responseData.profit.forEach((profit) => {\n        this.LinePlotData.x.push(profit.year)\n        this.LinePlotData.y.push(profit.value)\n      })\n      // draw the lineplot after the data is transformed\n      this.drawLinePlot()\n    },\n    drawLinePlot() {\n      // add axis titles\n      var trace1 = {\n        x: this.LinePlotData.x,\n        y: this.LinePlotData.y,\n        type: 'scatter'\n      };\n      var data = [trace1];\n      var layout = {\n        xaxis: {\n          title: 'Years',\n          showgrid: false,\n          zeroline: false\n        },\n        yaxis: {\n          title: 'Profit',\n          showline: false\n        }\n      }\n      var config = {responsive: true, displayModeBar: false}\n      Plotly.newPlot('myLinePlot', data, layout, config);\n\n    }\n  },\n  watch: {\n    selectedCompany() {\n      this.LinePlotData.x = [];\n      this.LinePlotData.y = [];\n\n      this.fetchData();\n    },\n    selectedAlgorithm() {\n      this.LinePlotData.x = [];\n      this.LinePlotData.y = [];\n\n      this.fetchData();\n    }\n  }\n}\n</script>\n\n\n\n\n<style scoped>\n\n</style>"],"mappings":";AAeA,OAAOA,MAAK,MAAO,uBAAuB;AAC1C,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,KAAK,EAAE,CAAC,iBAAiB,EAAE,mBAAmB,CAAC;EAC/CC,IAAI,EAAEA,CAAA,MAAO;IACXC,YAAY,EAAE;MAACC,CAAC,EAAE,EAAE;MAAEC,CAAC,EAAE;IAAE;EAC7B,CAAC,CAAC;EACFC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,SAAS,CAAC;EACjB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,SAASA,CAAA,EAAG;MAChB;MACA,IAAIE,MAAK,GAAI,kCAAiC,GAAI,IAAI,CAACC,MAAM,CAACC,eAAc,GACxE,aAAY,GAAI,IAAI,CAACD,MAAM,CAACE,iBAAgB;MAChDC,OAAO,CAACC,GAAG,CAAC,SAAQ,GAAIL,MAAM;MAC9B;MACA,MAAMM,QAAO,GAAI,MAAMC,KAAK,CAACP,MAAM;MACnC,MAAMQ,YAAW,GAAI,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAC1C;MACAD,YAAY,CAACE,MAAM,CAACC,OAAO,CAAED,MAAM,IAAK;QACtC,IAAI,CAAChB,YAAY,CAACC,CAAC,CAACiB,IAAI,CAACF,MAAM,CAACG,IAAI;QACpC,IAAI,CAACnB,YAAY,CAACE,CAAC,CAACgB,IAAI,CAACF,MAAM,CAACI,KAAK;MACvC,CAAC;MACD;MACA,IAAI,CAACC,YAAY,CAAC;IACpB,CAAC;IACDA,YAAYA,CAAA,EAAG;MACb;MACA,IAAIC,MAAK,GAAI;QACXrB,CAAC,EAAE,IAAI,CAACD,YAAY,CAACC,CAAC;QACtBC,CAAC,EAAE,IAAI,CAACF,YAAY,CAACE,CAAC;QACtBqB,IAAI,EAAE;MACR,CAAC;MACD,IAAIxB,IAAG,GAAI,CAACuB,MAAM,CAAC;MACnB,IAAIE,MAAK,GAAI;QACXC,KAAK,EAAE;UACLC,KAAK,EAAE,OAAO;UACdC,QAAQ,EAAE,KAAK;UACfC,QAAQ,EAAE;QACZ,CAAC;QACDC,KAAK,EAAE;UACLH,KAAK,EAAE,QAAQ;UACfI,QAAQ,EAAE;QACZ;MACF;MACA,IAAIC,MAAK,GAAI;QAACC,UAAU,EAAE,IAAI;QAAEC,cAAc,EAAE;MAAK;MACrDrC,MAAM,CAACsC,OAAO,CAAC,YAAY,EAAEnC,IAAI,EAAEyB,MAAM,EAAEO,MAAM,CAAC;IAEpD;EACF,CAAC;EACDI,KAAK,EAAE;IACL3B,eAAeA,CAAA,EAAG;MAChB,IAAI,CAACR,YAAY,CAACC,CAAA,GAAI,EAAE;MACxB,IAAI,CAACD,YAAY,CAACE,CAAA,GAAI,EAAE;MAExB,IAAI,CAACE,SAAS,CAAC,CAAC;IAClB,CAAC;IACDK,iBAAiBA,CAAA,EAAG;MAClB,IAAI,CAACT,YAAY,CAACC,CAAA,GAAI,EAAE;MACxB,IAAI,CAACD,YAAY,CAACE,CAAA,GAAI,EAAE;MAExB,IAAI,CAACE,SAAS,CAAC,CAAC;IAClB;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}