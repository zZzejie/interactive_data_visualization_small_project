{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createTextVNode as _createTextVNode, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-34e56c44\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"control-panel-font\"\n}, \"Company Overview\", -1 /* HOISTED */));\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"control-panel-font\"\n}, \"Profit View of Company\", -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_col = _resolveComponent(\"v-col\");\n  const _component_v_row = _resolveComponent(\"v-row\");\n  const _component_v_select = _resolveComponent(\"v-select\");\n  const _component_ScatterPlot = _resolveComponent(\"ScatterPlot\");\n  const _component_LinePlot = _resolveComponent(\"LinePlot\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_v_container, {\n    fluid: \"\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_row, null, {\n      default: _withCtx(() => [_createVNode(_component_v_col, {\n        cols: \"12\",\n        md: \"2\",\n        class: \"sideBar\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_v_row, null, {\n          default: _withCtx(() => [_createVNode(_component_v_col, {\n            cols: \"12\",\n            sm: \"12\"\n          }, {\n            default: _withCtx(() => [_hoisted_1]),\n            _: 1 /* STABLE */\n          })]),\n\n          _: 1 /* STABLE */\n        }), _createVNode(_component_v_row, null, {\n          default: _withCtx(() => [_createVNode(_component_v_col, {\n            cols: \"12\",\n            sm: \"12\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_v_select, {\n              items: _ctx.categories.values,\n              label: \"Select a category\",\n              dense: \"\",\n              modelValue: _ctx.categories.selectedValue,\n              \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.categories.selectedValue = $event),\n              onChange: $options.changeCategory\n            }, null, 8 /* PROPS */, [\"items\", \"modelValue\", \"onChange\"])]),\n            _: 1 /* STABLE */\n          })]),\n\n          _: 1 /* STABLE */\n        }), _createVNode(_component_v_row, null, {\n          default: _withCtx(() => [_createVNode(_component_v_col, {\n            cols: \"12\",\n            sm: \"12\"\n          }, {\n            default: _withCtx(() => [_hoisted_2]),\n            _: 1 /* STABLE */\n          })]),\n\n          _: 1 /* STABLE */\n        }), _createVNode(_component_v_row, null, {\n          default: _withCtx(() => [_createVNode(_component_v_col, {\n            cols: \"12\",\n            sm: \"12\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_v_select, {\n              items: _ctx.companies.values,\n              label: \"Select a company\",\n              dense: \"\",\n              modelValue: _ctx.companies.selectedValue,\n              \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.companies.selectedValue = $event),\n              onChange: $options.changeCompany\n            }, null, 8 /* PROPS */, [\"items\", \"modelValue\", \"onChange\"])]),\n            _: 1 /* STABLE */\n          })]),\n\n          _: 1 /* STABLE */\n        }), _createVNode(_component_v_row, null, {\n          default: _withCtx(() => [_createVNode(_component_v_col, {\n            cols: \"12\",\n            sm: \"12\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_v_select, {\n              items: _ctx.algorithm.values,\n              label: \"Select an algorithm for prediction\",\n              dense: \"\",\n              modelValue: _ctx.algorithm.selectedValue,\n              \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.algorithm.selectedValue = $event),\n              onChange: $options.changeAlgorithm\n            }, null, 8 /* PROPS */, [\"items\", \"modelValue\", \"onChange\"])]),\n            _: 1 /* STABLE */\n          })]),\n\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      }), _createVNode(_component_v_col, {\n        cols: \"12\",\n        md: \"5\"\n      }, {\n        default: _withCtx(() => [_createTextVNode(\" // allow an emitted event from the child component (Company Overview) to the parent component (Configuration Panel). \"), (_openBlock(), _createBlock(_component_ScatterPlot, {\n          key: _ctx.scatterPlotId,\n          selectedCategory: _ctx.categories.selectedValue,\n          onChangeCurrentlySelectedCompany: $options.changeCurrentlySelectedCompany\n        }, null, 8 /* PROPS */, [\"selectedCategory\", \"onChangeCurrentlySelectedCompany\"]))]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_v_col, {\n        cols: \"12\",\n        md: \"5\"\n      }, {\n        default: _withCtx(() => [(_openBlock(), _createBlock(_component_LinePlot, {\n          key: _ctx.linePlotId,\n          selectedCompany: _ctx.companies.selectedValue,\n          selectedAlgorithm: _ctx.algorithm.selectedValue\n        }, null, 8 /* PROPS */, [\"selectedCompany\", \"selectedAlgorithm\"]))]),\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["_createElementVNode","class","_createElementBlock","_createVNode","_component_v_container","fluid","_component_v_row","_component_v_col","cols","md","sm","_hoisted_1","_component_v_select","items","_ctx","categories","values","label","dense","selectedValue","$event","onChange","$options","changeCategory","_hoisted_2","companies","changeCompany","algorithm","changeAlgorithm","_createBlock","_component_ScatterPlot","key","scatterPlotId","selectedCategory","onChangeCurrentlySelectedCompany","changeCurrentlySelectedCompany","_component_LinePlot","linePlotId","selectedCompany","selectedAlgorithm"],"sources":["/Users/zoe/Desktop/example-project/hello-world/services/frontend/src/components/ConfigurationPanel.vue"],"sourcesContent":["<template>\n  <div>\n    <v-container fluid>\n      <v-row>\n        <v-col cols=\"12\" md=\"2\" class=\"sideBar\">\n          <v-row>\n            <v-col cols=\"12\" sm=\"12\">\n              <div class=\"control-panel-font\">Company Overview</div>\n            </v-col>\n          </v-row>\n          <v-row>\n            <v-col cols=\"12\" sm=\"12\">\n              <v-select\n                  :items=\"categories.values\"\n                  label=\"Select a category\"\n                  dense\n                  v-model=\"categories.selectedValue\"\n                  @change=\"changeCategory\"\n              ></v-select>\n            </v-col>\n          </v-row>\n          <v-row>\n            <v-col cols=\"12\" sm=\"12\">\n              <div class=\"control-panel-font\">Profit View of Company</div>\n            </v-col>\n          </v-row>\n          <v-row>\n            <v-col cols=\"12\" sm=\"12\">\n              <v-select\n                  :items=\"companies.values\"\n                  label=\"Select a company\"\n                  dense\n                  v-model=\"companies.selectedValue\"\n                  @change=\"changeCompany\"\n              ></v-select>\n            </v-col>\n          </v-row>\n          <v-row>\n            <v-col cols=\"12\" sm=\"12\">\n              <v-select\n                  :items=\"algorithm.values\"\n                  label=\"Select an algorithm for prediction\"\n                  dense\n                  v-model=\"algorithm.selectedValue\"\n                  @change=\"changeAlgorithm\"\n              ></v-select>\n            </v-col>\n          </v-row>\n        </v-col>\n        <v-col cols=\"12\" md=\"5\">\n          // allow an emitted event from the child component (Company Overview) to the parent component (Configuration Panel).\n          <ScatterPlot :key=\"scatterPlotId\"\n                       :selectedCategory=\"categories.selectedValue\"\n                       @changeCurrentlySelectedCompany=\"changeCurrentlySelectedCompany\"\n          />\n        </v-col>\n        <v-col cols=\"12\" md=\"5\">\n          <LinePlot :key=\"linePlotId\"\n                    :selectedCompany=\"companies.selectedValue\"\n                    :selectedAlgorithm=\"algorithm.selectedValue\"/>\n        </v-col>\n      </v-row>\n    </v-container>\n  </div>\n</template>\n<script>\nimport ScatterPlot from './ScatterPlot';\nimport LinePlot from './LinePlot';\nexport default {\n  components: {ScatterPlot, LinePlot},\n  data: () => ({\n    scatterPlotId: 0,\n    linePlotId: 0,\n    categories: {\n      values: ['All', 'tech', 'health', 'bank'],\n      selectedValue: 'All'\n    },\n    companies: {\n      values: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n      selectedValue: 1\n    },\n    algorithm: {\n      values: ['none', 'random', 'regression'],\n      selectedValue: 'none'\n    },\n  }),\n  methods: {\n    changeCategory() {\n      this.scatterPlotId += 1\n    },\n    changeCompany() {\n      this.linePlotId += 1\n    },\n    changeAlgorithm() {\n      this.linePlotId += 1\n    },\n    changeCurrentlySelectedCompany(companyId) {\n      this.companies.selectedValue = companyId\n      this.changeCompany()\n    }\n  },\n\n  }\n</script>\n\n<style scoped>\n.control-panel-font {\n  font-family: \"Open Sans\", verdana, arial, sans-serif;\n  align-items: center;\n  font-size: 15px;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  display: flex;\n  font-weight: 500;\n  height: 40px;\n}\n.sideBar {\n  border-right: 1px solid rgba(0, 0, 0, 0.1);\n  background: #fafafa;\n  padding-left: 17px;\n  height: calc(100vh - 50px);\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}