{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"height\": \"90vh\"\n  }\n}, [/*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"myScatterPlot\",\n  style: {\n    \"height\": \"inherit\"\n  }\n})], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_row = _resolveComponent(\"v-row\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_v_row, {\n    align: \"center\",\n    justify: \"center\",\n    class: \"mt-1 mb-0\"\n  }, {\n    default: _withCtx(() => [_createElementVNode(\"h3\", null, \"Overview of \" + _toDisplayString(_ctx.$props.selectedCategory) + \" Companies\", 1 /* TEXT */)]),\n\n    _: 1 /* STABLE */\n  }), _hoisted_1]);\n}","map":{"version":3,"names":["_createElementVNode","style","id","_createElementBlock","_createVNode","_component_v_row","align","justify","class","_toDisplayString","_ctx","$props","selectedCategory","_hoisted_1"],"sources":["/Users/zoe/Desktop/example-project/hello-world/services/frontend/src/components/ScatterPlot.vue"],"sourcesContent":["<template>\n  <div>\n    <v-row align=\"center\" justify=\"center\" class=\"mt-1 mb-0\">\n      <h3>Overview of {{ $props.selectedCategory }} Companies</h3>\n    </v-row>\n    <div style=\"height: 90vh\">\n      <div id='myScatterPlot' style=\"height: inherit\"></div>\n    </div>\n  </div>\n</template>\n\n\n\n\n<script>\nimport Plotly from 'plotly.js/dist/plotly';\nexport default {\n  name: \"ScatterPlot\",\n  props: [\n    \"selectedCategory\"\n  ],\n  data: () => ({\n    ScatterPlotData: {x: [], y: [], name: []},\n  }),\n  mounted() {\n    this.fetchData()\n  },\n  methods: {\n    async fetchData() {\n      // req URL to retrieve companies from backend\n      var reqUrl = 'http://127.0.0.1:5000/companies?category=' + this.$props.selectedCategory\n      console.log('ReqURL ' + reqUrl)\n      // await response and data\n      const response = await fetch(reqUrl)\n      const responseData = await response.json();\n\n      // transform data to usable by scatterplot\n      responseData.forEach((company) => {\n        this.ScatterPlotData.name.push(company.name)\n        this.ScatterPlotData.x.push(company.employees)\n        this.ScatterPlotData.y.push(company.founding_year)\n      })\n      // after the data is loaded, draw the plot\n      this.drawScatterPlot()\n    },\n    drawScatterPlot() {\n      var trace1 = {\n        x: this.ScatterPlotData.x,\n        y: this.ScatterPlotData.y,\n        mode: 'markers',\n        type: 'scatter',\n        text: this.ScatterPlotData.name,\n        marker: {\n          color: 'black', // Add a marker that sets the color of all data points to be black and of the same size.\n          size: 12\n        }\n      };\n      // Call a method after creating the plot which is responsible to handle the click events.\n      var data = [trace1];\n      var layout = {}\n      var config = {responsive: true, displayModeBar: false}\n      Plotly.newPlot('myScatterPlot', data, layout, config);\n      this.clickScatterPlot()\n    }\n  },\n  watch: {\n    selectedCategory: function () {\n      this.ScatterPlotData.x = [];\n      this.ScatterPlotData.y = [];\n      this.ScatterPlotData.name = [];\n      this.fetchData();\n    }\n  }\n}\n</script>\n\n\n\n\n<style scoped>\n\n</style>"],"mappings":";gCAKIA,mBAAA,CAEM;EAFDC,KAAoB,EAApB;IAAA;EAAA;AAAoB,I,aACvBD,mBAAA,CAAsD;EAAjDE,EAAE,EAAC,eAAe;EAACD,KAAuB,EAAvB;IAAA;EAAA;;;;;uBAL5BE,mBAAA,CAOM,cANJC,YAAA,CAEQC,gBAAA;IAFDC,KAAK,EAAC,QAAQ;IAACC,OAAO,EAAC,QAAQ;IAACC,KAAK,EAAC;;sBAC3C,MAA4D,CAA5DR,mBAAA,CAA4D,YAAxD,cAAY,GAAAS,gBAAA,CAAGC,IAAA,CAAAC,MAAM,CAACC,gBAAgB,IAAG,YAAU,gB;;;MAEzDC,UAEM,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}