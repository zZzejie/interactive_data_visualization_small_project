{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Plotly from 'plotly.js/dist/plotly';\nexport default {\n  name: \"ScatterPlot\",\n  props: [\"selectedCategory\"],\n  data: () => ({\n    ScatterPlotData: {\n      x: [],\n      y: [],\n      name: []\n    }\n  }),\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    async fetchData() {\n      // req URL to retrieve companies from backend\n      var reqUrl = 'http://127.0.0.1:5000/companies?category=' + this.$props.selectedCategory;\n      console.log('ReqURL ' + reqUrl);\n      // await response and data\n      const response = await fetch(reqUrl);\n      const responseData = await response.json();\n\n      // transform data to usable by scatterplot\n      responseData.forEach(company => {\n        this.ScatterPlotData.name.push(company.name);\n        this.ScatterPlotData.x.push(company.employees);\n        this.ScatterPlotData.y.push(company.founding_year);\n      });\n      // after the data is loaded, draw the plot\n      this.drawScatterPlot();\n    },\n    drawScatterPlot() {\n      var trace1 = {\n        x: this.ScatterPlotData.x,\n        y: this.ScatterPlotData.y,\n        mode: 'markers',\n        type: 'scatter',\n        text: this.ScatterPlotData.name,\n        marker: {\n          color: 'black',\n          // Add a marker that sets the color of all data points to be black and of the same size.\n          size: 12\n        }\n      };\n      // Call a method after creating the plot which is responsible to handle the click events.\n      var data = [trace1];\n      var layout = {};\n      var config = {\n        responsive: true,\n        displayModeBar: false\n      };\n      Plotly.newPlot('myScatterPlot', data, layout, config);\n      this.clickScatterPlot();\n    }\n  },\n  watch: {\n    selectedCategory: function () {\n      this.ScatterPlotData.x = [];\n      this.ScatterPlotData.y = [];\n      this.ScatterPlotData.name = [];\n      this.fetchData();\n    }\n  },\n  // Upon a click, retrieve the point number and then emit an event with (pn+1 = company id).\n  // Emitting an event will notify the parent (configuration panel) that the selected company has changed.\n  // Then, we revert all colors to black in case of previous clicks and change the current selection to blue.\n  // Then we call the Plotly.restyle function to update the plot.\n  clickScatterPlot() {\n    var pn = 0;\n    var that = this;\n    var myPlot = document.getElementById('myScatterPlot');\n    myPlot.on('plotly_click', function (data) {\n      for (var i = 0; i < data.points.length; i++) {\n        // get the index of point\n        pn = data.points[i].pointNumber;\n\n        // emit event to change the currently selected company in the a) configuration panel\n        // and b) update the Profit View\n        that.$emit('changeCurrentlySelectedCompany', pn + 1);\n\n        // revert all colors\n        var colors = ['#00000' * 15];\n\n        // and change currently selected color to blue\n        colors[pn] = '#3777ee';\n\n        // update the marker and plot\n        var update = {\n          'marker': {\n            color: colors,\n            size: 12\n          }\n        };\n        Plotly.restyle('myScatterPlot', update);\n      }\n    });\n  }\n};","map":{"version":3,"names":["Plotly","name","props","data","ScatterPlotData","x","y","mounted","fetchData","methods","reqUrl","$props","selectedCategory","console","log","response","fetch","responseData","json","forEach","company","push","employees","founding_year","drawScatterPlot","trace1","mode","type","text","marker","color","size","layout","config","responsive","displayModeBar","newPlot","clickScatterPlot","watch","pn","that","myPlot","document","getElementById","on","i","points","length","pointNumber","$emit","colors","update","restyle"],"sources":["/Users/zoe/Desktop/example-project/hello-world/services/frontend/src/components/ScatterPlot.vue"],"sourcesContent":["<template>\n  <div>\n    <v-row align=\"center\" justify=\"center\" class=\"mt-1 mb-0\">\n      <h3>Overview of {{ $props.selectedCategory }} Companies</h3>\n    </v-row>\n    <div style=\"height: 90vh\">\n      <div id='myScatterPlot' style=\"height: inherit\"></div>\n    </div>\n  </div>\n</template>\n\n\n\n\n<script>\nimport Plotly from 'plotly.js/dist/plotly';\nexport default {\n  name: \"ScatterPlot\",\n  props: [\n    \"selectedCategory\"\n  ],\n  data: () => ({\n    ScatterPlotData: {x: [], y: [], name: []},\n  }),\n  mounted() {\n    this.fetchData()\n  },\n  methods: {\n    async fetchData() {\n      // req URL to retrieve companies from backend\n      var reqUrl = 'http://127.0.0.1:5000/companies?category=' + this.$props.selectedCategory\n      console.log('ReqURL ' + reqUrl)\n      // await response and data\n      const response = await fetch(reqUrl)\n      const responseData = await response.json();\n\n      // transform data to usable by scatterplot\n      responseData.forEach((company) => {\n        this.ScatterPlotData.name.push(company.name)\n        this.ScatterPlotData.x.push(company.employees)\n        this.ScatterPlotData.y.push(company.founding_year)\n      })\n      // after the data is loaded, draw the plot\n      this.drawScatterPlot()\n    },\n    drawScatterPlot() {\n      var trace1 = {\n        x: this.ScatterPlotData.x,\n        y: this.ScatterPlotData.y,\n        mode: 'markers',\n        type: 'scatter',\n        text: this.ScatterPlotData.name,\n        marker: {\n          color: 'black', // Add a marker that sets the color of all data points to be black and of the same size.\n          size: 12\n        }\n      };\n      // Call a method after creating the plot which is responsible to handle the click events.\n      var data = [trace1];\n      var layout = {}\n      var config = {responsive: true, displayModeBar: false}\n      Plotly.newPlot('myScatterPlot', data, layout, config);\n      this.clickScatterPlot()\n    }\n  },\n  watch: {\n    selectedCategory: function () {\n      this.ScatterPlotData.x = [];\n      this.ScatterPlotData.y = [];\n      this.ScatterPlotData.name = [];\n      this.fetchData();\n    }\n  },\n  \n  // Upon a click, retrieve the point number and then emit an event with (pn+1 = company id).\n  // Emitting an event will notify the parent (configuration panel) that the selected company has changed.\n  // Then, we revert all colors to black in case of previous clicks and change the current selection to blue.\n  // Then we call the Plotly.restyle function to update the plot.\n  clickScatterPlot() {\n    var pn = 0\n    var that = this\n    var myPlot = document.getElementById('myScatterPlot')\n    myPlot.on('plotly_click', function (data) {\n      for (var i = 0; i < data.points.length; i++) {\n\n        // get the index of point\n        pn = data.points[i].pointNumber;\n\n        // emit event to change the currently selected company in the a) configuration panel\n        // and b) update the Profit View\n        that.$emit('changeCurrentlySelectedCompany', pn + 1)\n\n        // revert all colors\n        var colors = ['#00000' * 15]\n\n        // and change currently selected color to blue\n        colors[pn] = '#3777ee';\n\n        // update the marker and plot\n        var update = {'marker': {color: colors, size: 12}};\n        Plotly.restyle('myScatterPlot', update);\n      }\n    });\n  }\n}\n</script>\n\n\n\n\n<style scoped>\n\n</style>"],"mappings":";AAeA,OAAOA,MAAK,MAAO,uBAAuB;AAC1C,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,KAAK,EAAE,CACL,kBAAiB,CAClB;EACDC,IAAI,EAAEA,CAAA,MAAO;IACXC,eAAe,EAAE;MAACC,CAAC,EAAE,EAAE;MAAEC,CAAC,EAAE,EAAE;MAAEL,IAAI,EAAE;IAAE;EAC1C,CAAC,CAAC;EACFM,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,SAAS,CAAC;EACjB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,SAASA,CAAA,EAAG;MAChB;MACA,IAAIE,MAAK,GAAI,2CAA0C,GAAI,IAAI,CAACC,MAAM,CAACC,gBAAe;MACtFC,OAAO,CAACC,GAAG,CAAC,SAAQ,GAAIJ,MAAM;MAC9B;MACA,MAAMK,QAAO,GAAI,MAAMC,KAAK,CAACN,MAAM;MACnC,MAAMO,YAAW,GAAI,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;MAE1C;MACAD,YAAY,CAACE,OAAO,CAAEC,OAAO,IAAK;QAChC,IAAI,CAAChB,eAAe,CAACH,IAAI,CAACoB,IAAI,CAACD,OAAO,CAACnB,IAAI;QAC3C,IAAI,CAACG,eAAe,CAACC,CAAC,CAACgB,IAAI,CAACD,OAAO,CAACE,SAAS;QAC7C,IAAI,CAAClB,eAAe,CAACE,CAAC,CAACe,IAAI,CAACD,OAAO,CAACG,aAAa;MACnD,CAAC;MACD;MACA,IAAI,CAACC,eAAe,CAAC;IACvB,CAAC;IACDA,eAAeA,CAAA,EAAG;MAChB,IAAIC,MAAK,GAAI;QACXpB,CAAC,EAAE,IAAI,CAACD,eAAe,CAACC,CAAC;QACzBC,CAAC,EAAE,IAAI,CAACF,eAAe,CAACE,CAAC;QACzBoB,IAAI,EAAE,SAAS;QACfC,IAAI,EAAE,SAAS;QACfC,IAAI,EAAE,IAAI,CAACxB,eAAe,CAACH,IAAI;QAC/B4B,MAAM,EAAE;UACNC,KAAK,EAAE,OAAO;UAAE;UAChBC,IAAI,EAAE;QACR;MACF,CAAC;MACD;MACA,IAAI5B,IAAG,GAAI,CAACsB,MAAM,CAAC;MACnB,IAAIO,MAAK,GAAI,CAAC;MACd,IAAIC,MAAK,GAAI;QAACC,UAAU,EAAE,IAAI;QAAEC,cAAc,EAAE;MAAK;MACrDnC,MAAM,CAACoC,OAAO,CAAC,eAAe,EAAEjC,IAAI,EAAE6B,MAAM,EAAEC,MAAM,CAAC;MACrD,IAAI,CAACI,gBAAgB,CAAC;IACxB;EACF,CAAC;EACDC,KAAK,EAAE;IACL1B,gBAAgB,EAAE,SAAAA,CAAA,EAAY;MAC5B,IAAI,CAACR,eAAe,CAACC,CAAA,GAAI,EAAE;MAC3B,IAAI,CAACD,eAAe,CAACE,CAAA,GAAI,EAAE;MAC3B,IAAI,CAACF,eAAe,CAACH,IAAG,GAAI,EAAE;MAC9B,IAAI,CAACO,SAAS,CAAC,CAAC;IAClB;EACF,CAAC;EAED;EACA;EACA;EACA;EACA6B,gBAAgBA,CAAA,EAAG;IACjB,IAAIE,EAAC,GAAI;IACT,IAAIC,IAAG,GAAI,IAAG;IACd,IAAIC,MAAK,GAAIC,QAAQ,CAACC,cAAc,CAAC,eAAe;IACpDF,MAAM,CAACG,EAAE,CAAC,cAAc,EAAE,UAAUzC,IAAI,EAAE;MACxC,KAAK,IAAI0C,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAI1C,IAAI,CAAC2C,MAAM,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;QAE3C;QACAN,EAAC,GAAIpC,IAAI,CAAC2C,MAAM,CAACD,CAAC,CAAC,CAACG,WAAW;;QAE/B;QACA;QACAR,IAAI,CAACS,KAAK,CAAC,gCAAgC,EAAEV,EAAC,GAAI,CAAC;;QAEnD;QACA,IAAIW,MAAK,GAAI,CAAC,QAAO,GAAI,EAAE;;QAE3B;QACAA,MAAM,CAACX,EAAE,IAAI,SAAS;;QAEtB;QACA,IAAIY,MAAK,GAAI;UAAC,QAAQ,EAAE;YAACrB,KAAK,EAAEoB,MAAM;YAAEnB,IAAI,EAAE;UAAE;QAAC,CAAC;QAClD/B,MAAM,CAACoD,OAAO,CAAC,eAAe,EAAED,MAAM,CAAC;MACzC;IACF,CAAC,CAAC;EACJ;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}