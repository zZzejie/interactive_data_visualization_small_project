{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"height\": \"90vh\"\n  }\n}, [/*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"myBarChart\",\n  style: {\n    \"height\": \"inherit\"\n  }\n})], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_row = _resolveComponent(\"v-row\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_v_row, {\n    align: \"center\",\n    justify: \"center\",\n    class: \"mt-1 mb-0\"\n  }, {\n    default: _withCtx(() => [_createElementVNode(\"h3\", null, \"Size Comparison in \" + _toDisplayString(_ctx.$props.selectedCategory) + \" Companies\", 1 /* TEXT */)]),\n\n    _: 1 /* STABLE */\n  }), _hoisted_1]);\n}","map":{"version":3,"names":["_createElementVNode","style","id","_createElementBlock","_createVNode","_component_v_row","align","justify","class","_toDisplayString","_ctx","$props","selectedCategory","_hoisted_1"],"sources":["/Users/zoe/Desktop/IVDA/Assignments/example-project/hello-world/services/frontend/src/components/BarChart.vue"],"sourcesContent":["<template>\n  <div>\n    <v-row align=\"center\" justify=\"center\" class=\"mt-1 mb-0\">\n      <h3>Size Comparison in {{ $props.selectedCategory }} Companies</h3>\n    </v-row>\n    <div style=\"height: 90vh\">\n      <div id='myBarChart' style=\"height: inherit\"></div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Plotly from 'plotly.js/dist/plotly';\nexport default {\n  name: \"BarChart\",\n  props: [\"selectedCategory\", \"selectedCompany\", \"averageEmployeeCount\"],\n  data: () => ({\n    BarChartData: {x: [], y: [], name: [], color: []},\n\n    categoryColors: { // Define colors for each category\n      bank: '#3498db',   // blue\n      tech: '#2ecc71',   // green\n      health: '#e74c3c'  // red\n    }\n  }),\n  mounted() {\n    this.fetchData()\n  },\n  methods: {\n    async fetchData() {\n      // req URL to retrieve companies from backend\n      var reqUrl = 'http://127.0.0.1:5000/companies?category=' + this.$props.selectedCategory\n      console.log('ReqURL ' + reqUrl)\n      // await response and data\n      const response = await fetch(reqUrl)\n      const responseData = await response.json();\n\n      responseData.forEach((company) => {\n        const categoryColor = this.categoryColors[company.category] || '#000000'; // Get the color for the category or black if not defined\n        this.BarChartData.name.push(company.name);\n        this.BarChartData.x.push(company.name);\n        this.BarChartData.y.push(company.employees);\n        this.BarChartData.color.push(categoryColor); // push the color to the color array for each company\n      });\n      // after the data is loaded, draw the plot\n      this.drawBarChart()\n    },\n    drawBarChart() {\n      // Calculate the average employee count for the category\n      const averageEmployeeCount = this.calculateAverageEmployeeCount(this.BarChartData.y);\n\n      var trace1 = {\n        x: this.BarChartData.x,\n        y: this.BarChartData.y,\n        mode: 'markers',\n        type: 'bar', // Change the type to bar\n        // text: this.BarChartData.name,\n        // marker: {\n        //   color: this.BarChartData.color,  // Use the color data for markers\n        //   size: 12\n        // },\n        marker: {\n          color: this.BarChartData.color // set color for bars\n        },\n\n        legendgroup: 'Companies',\n        name: \"\", // Remove the trace name\n\n      };\n      var trace2 = {\n        x: this.BarChartData.x,\n        y: Array(this.BarChartData.x.length).fill(averageEmployeeCount), // Array of average values for the average line\n        type: 'scatter',  // Change to 'scatter' type\n        mode: 'lines',    // Set mode to 'lines' to remove markers\n        line: {\n          color: '#8e44ad',\n          width: 2\n        },\n        legendgroup: 'Average',\n        name: 'Average employees',\n        hovertemplate: 'Average number: %{y} <extra></extra>' // use <extra> tag to remove the trace name from the hover label\n      };\n      // Call a method after creating the plot which is responsible to handle the click events.\n      var data = [trace1, trace2];\n      var layout = {\n        // Add axis titles\n        xaxis: {\n          title: 'Companies',\n          showgrid: false,\n          zeroline: false\n        },\n        yaxis: {\n          title: 'Number of Employees',\n          showline: false\n        },\n        showlegend:false,  // Hide the legend\n        // Add legend settings to the layout object\n        // legend: {\n        //   tracegroupgap: 10,  // Gap between legend entries\n        //   itemsizing: 'constant'  // Legend item size is constan\n        // },\n        margin: {\n          b: 180  // Adjust this value to move the x-axis label lower\n        },\n      };\n      var config = {responsive: true, displayModeBar: false}\n      Plotly.newPlot('myBarChart', data, layout, config);\n      this.clickBarChart()\n    },\n\n    // Calculate the average employee count for the category\n    calculateAverageEmployeeCount(employeeCounts) {\n      const total = employeeCounts.reduce((acc, count) => acc + count, 0);\n      return total / employeeCounts.length;\n    },\n\n    // Upon a click, retrieve the point number and then emit an event with (pn+1 = company id).\n    // Emitting an event will notify the parent (configuration panel) that the selected company has changed.\n    // Then, revert all colors to black in case of previous clicks and change the current selection to blue.\n    // Then, call the Plotly. restyle function to update the plot.\n\n    clickBarChart() {\n      var that = this;\n      var myPlot = document.getElementById('myBarChart');\n      var originalColors = [...this.BarChartData.color]; // Store original colors\n\n      myPlot.on('plotly_click', function (data) {\n        var clickedIndices = data.points.map(point => point.pointNumber);\n\n        for (var i = 0; i < data.points.length; i++) {\n          var pn = data.points[i].pointNumber;\n          // Extract necessary data for emitting the event, if needed\n          var clickedBarData = that.BarChartData[pn];\n          that.$emit('changeCurrentlySelectedBar', clickedBarData);\n        }\n        \n        // Change all unclicked bars to black while keeping the clicked bar's color unchanged\n        var colors = originalColors.map((color, index) => {\n          return clickedIndices.includes(index) ? color : '#000000';\n        });\n\n        var update = { 'marker': { color: colors } };\n        Plotly.restyle('myBarChart', update);\n      });\n    }\n\n\n  },\n  watch: {\n    selectedCategory: function () {\n      this.BarChartData.x = [];\n      this.BarChartData.y = [];\n      this.BarChartData.name = [];\n      this.BarChartData.color = []; // Reset the color array when the category changes\n      this.fetchData();\n    }\n  }\n}\n</script>\n\n\n<style scoped>\n\n</style>"],"mappings":";gCAKIA,mBAAA,CAEM;EAFDC,KAAoB,EAApB;IAAA;EAAA;AAAoB,I,aACvBD,mBAAA,CAAmD;EAA9CE,EAAE,EAAC,YAAY;EAACD,KAAuB,EAAvB;IAAA;EAAA;;;;;uBALzBE,mBAAA,CAOM,cANJC,YAAA,CAEQC,gBAAA;IAFDC,KAAK,EAAC,QAAQ;IAACC,OAAO,EAAC,QAAQ;IAACC,KAAK,EAAC;;sBAC3C,MAAmE,CAAnER,mBAAA,CAAmE,YAA/D,qBAAmB,GAAAS,gBAAA,CAAGC,IAAA,CAAAC,MAAM,CAACC,gBAAgB,IAAG,YAAU,gB;;;MAEhEC,UAEM,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}