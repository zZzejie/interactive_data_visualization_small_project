{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Plotly from 'plotly.js/dist/plotly';\nexport default {\n  name: \"ScatterPlot\",\n  props: [\"selectedCategory\"],\n  data: () => ({\n    ScatterPlotData: {\n      x: [],\n      y: [],\n      name: [],\n      color: []\n    },\n    // Add a color array to the data\n    categoryColors: {\n      // Define colors for each category\n      bank: '#3498db',\n      // blue\n      tech: '#2ecc71',\n      // green\n      health: '#e74c3c' // red\n    }\n  }),\n\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    async fetchData() {\n      // req URL to retrieve companies from backend\n      var reqUrl = 'http://127.0.0.1:5000/companies?category=' + this.$props.selectedCategory;\n      console.log('ReqURL ' + reqUrl);\n      // await response and data\n      const response = await fetch(reqUrl);\n      const responseData = await response.json();\n      responseData.forEach(company => {\n        const categoryColor = this.categoryColors[company.category] || '#000000'; // Get the color for the category or black if not defined\n        this.ScatterPlotData.name.push(company.name);\n        this.ScatterPlotData.x.push(company.founding_year);\n        this.ScatterPlotData.y.push(company.employees);\n        this.ScatterPlotData.color.push(categoryColor); // push the color to the color array for each company\n      });\n      // after the data is loaded, draw the plot\n      this.drawScatterPlot();\n    },\n    drawScatterPlot() {\n      var trace1 = {\n        x: this.ScatterPlotData.x,\n        y: this.ScatterPlotData.y,\n        mode: 'markers',\n        type: 'scatter',\n        text: this.ScatterPlotData.name,\n        marker: {\n          // Add a marker that sets the color for each company based on the category color\n          color: this.ScatterPlotData.color,\n          size: 12\n        },\n        legendgroup: 'Companies',\n        // Group for legend\n        name: 'Companies' // Legend name\n      };\n      // Call a method after creating the plot which is responsible to handle the click events.\n      var data = [trace1];\n      var layout = {\n        // Add axis titles\n        xaxis: {\n          title: 'Founding Years',\n          showgrid: false,\n          zeroline: false\n        },\n        yaxis: {\n          title: 'Employees',\n          showline: false\n        },\n        // Add legend settings to the layout object\n        legend: {\n          tracegroupgap: 10,\n          // Gap between legend entries\n          itemsizing: 'constant' // Legend item size is constant\n        }\n      };\n\n      var config = {\n        responsive: true,\n        displayModeBar: false\n      };\n      Plotly.newPlot('myScatterPlot', data, layout, config);\n      this.clickScatterPlot();\n    },\n    // Upon a click, retrieve the point number and then emit an event with (pn+1 = company id).\n    // Use this index to retrieve the company name associated with that point from your data and emit that as part of the event.\n    // Emitting an event will notify the parent (configuration panel) that the selected company has changed.\n    // Then, revert all colors to black in case of previous clicks and remain the color of the current selection.\n    // Then, call the Plotly. restyle function to update the plot.\n\n    // clickScatterPlot() {\n    //   var that = this\n    //   var myPlot = document.getElementById('myScatterPlot')\n    //   myPlot.on('plotly_click', function (data) {\n    //     for (var i = 0; i < data.points.length; i++) {\n    //\n    //       // Get the index of point and retrieve the associated company name\n    //       var pn = data.points[i].pointNumber;\n    //       var companyName = that.ScatterPlotData.name[pn];\n    //\n    //       // Emit event to change the currently selected company with the company name\n    //       that.$emit('changeCurrentlySelectedCompany', companyName);\n    //\n    //\n    //       // get the index of point\n    //       // pn = data.points[i].pointNumber;\n    //\n    //       // emit event to change the currently selected company in the a) configuration panel\n    //       // and b) update the Profit View\n    //       // that.$emit('changeCurrentlySelectedCompany', pn + 1)\n    //\n    //       // revert all colors\n    //       var colors = ['#00000' * 15]\n    //\n    //       // and change currently selected color to blue\n    //       colors[pn] = '#3777ee';\n    //\n    //       // update the marker and plot\n    //       var update = {'marker': {color: colors, size: 12}};\n    //       Plotly.restyle('myScatterPlot', update);\n    //     }\n    //   });\n    // }\n\n    clickScatterPlot() {\n      var that = this;\n      var myPlot = document.getElementById('myScatterPlot');\n      var originalColors = [...this.ScatterPlotData.color]; // Store original colors\n\n      myPlot.on('plotly_click', function (data) {\n        var clickedIndices = data.points.map(point => point.pointNumber);\n        for (var i = 0; i < data.points.length; i++) {\n          // Get the index of point and retrieve the associated company name\n          var pn = data.points[i].pointNumber;\n          var companyName = that.ScatterPlotData.name[pn];\n\n          // Emitting an event to change the currently selected company in the configuration panel\n          that.$emit('changeCurrentlySelectedCompany', companyName); // Emitting the event\n\n          // Change all unclicked points to black\n          var colors = originalColors.map((color, index) => {\n            return clickedIndices.includes(index) ? color : '#000000';\n          });\n          var update = {\n            'marker': {\n              color: colors,\n              size: 12\n            }\n          };\n          Plotly.restyle('myScatterPlot', update);\n        }\n      });\n    }\n  },\n  // \"watch\" the selectedCategory prop for changes and, when it changes, re-fetch the data and redraw the scatterplot\n  watch: {\n    selectedCategory: function () {\n      this.ScatterPlotData.x = [];\n      this.ScatterPlotData.y = [];\n      this.ScatterPlotData.name = [];\n      this.ScatterPlotData.color = []; // Reset the color array when the category changes\n      this.fetchData();\n    }\n  }\n};","map":{"version":3,"names":["Plotly","name","props","data","ScatterPlotData","x","y","color","categoryColors","bank","tech","health","mounted","fetchData","methods","reqUrl","$props","selectedCategory","console","log","response","fetch","responseData","json","forEach","company","categoryColor","category","push","founding_year","employees","drawScatterPlot","trace1","mode","type","text","marker","size","legendgroup","layout","xaxis","title","showgrid","zeroline","yaxis","showline","legend","tracegroupgap","itemsizing","config","responsive","displayModeBar","newPlot","clickScatterPlot","that","myPlot","document","getElementById","originalColors","on","clickedIndices","points","map","point","pointNumber","i","length","pn","companyName","$emit","colors","index","includes","update","restyle","watch"],"sources":["/Users/zoe/Desktop/IVDA/Assignments/example-project/hello-world/services/frontend/src/components/ScatterPlot.vue"],"sourcesContent":["<template>\n  <div>\n    <v-row align=\"center\" justify=\"center\" class=\"mt-1 mb-0\">\n      <h3>Overview of {{ $props.selectedCategory }} Companies</h3>\n    </v-row>\n    <div style=\"height: 90vh\">\n      <div id='myScatterPlot' style=\"height: inherit\"></div>\n    </div>\n  </div>\n</template>\n\n\n\n\n<script>\nimport Plotly from 'plotly.js/dist/plotly';\nexport default {\n  name: \"ScatterPlot\",\n  props: [\n    \"selectedCategory\"\n  ],\n  data: () => ({\n    ScatterPlotData: {x: [], y: [], name: [], color: []}, // Add a color array to the data\n    categoryColors: { // Define colors for each category\n      bank: '#3498db',   // blue\n      tech: '#2ecc71',   // green\n      health: '#e74c3c'  // red\n    }\n  }),\n  mounted() {\n    this.fetchData()\n  },\n  methods: {\n    async fetchData() {\n      // req URL to retrieve companies from backend\n      var reqUrl = 'http://127.0.0.1:5000/companies?category=' + this.$props.selectedCategory\n      console.log('ReqURL ' + reqUrl)\n      // await response and data\n      const response = await fetch(reqUrl)\n      const responseData = await response.json();\n\n      responseData.forEach((company) => {\n        const categoryColor = this.categoryColors[company.category] || '#000000'; // Get the color for the category or black if not defined\n        this.ScatterPlotData.name.push(company.name);\n        this.ScatterPlotData.x.push(company.founding_year);\n        this.ScatterPlotData.y.push(company.employees);\n        this.ScatterPlotData.color.push(categoryColor); // push the color to the color array for each company\n      });\n      // after the data is loaded, draw the plot\n      this.drawScatterPlot()\n    },\n    drawScatterPlot() {\n      var trace1 = {\n        x: this.ScatterPlotData.x,\n        y: this.ScatterPlotData.y,\n        mode: 'markers',\n        type: 'scatter',\n        text: this.ScatterPlotData.name,\n        marker: {\n          // Add a marker that sets the color for each company based on the category color\n          color: this.ScatterPlotData.color,\n          size: 12\n        },\n        legendgroup: 'Companies',  // Group for legend\n        name: 'Companies'           // Legend name\n      };\n      // Call a method after creating the plot which is responsible to handle the click events.\n      var data = [trace1];\n      var layout = {\n        // Add axis titles\n        xaxis: {\n          title: 'Founding Years',\n          showgrid: false,\n          zeroline: false\n        },\n        yaxis: {\n          title: 'Employees',\n          showline: false\n        },\n        // Add legend settings to the layout object\n        legend: {\n          tracegroupgap: 10,  // Gap between legend entries\n          itemsizing: 'constant'  // Legend item size is constant\n        }\n      };\n      var config = {responsive: true, displayModeBar: false}\n      Plotly.newPlot('myScatterPlot', data, layout, config);\n      this.clickScatterPlot()\n    },\n    // Upon a click, retrieve the point number and then emit an event with (pn+1 = company id).\n    // Use this index to retrieve the company name associated with that point from your data and emit that as part of the event.\n    // Emitting an event will notify the parent (configuration panel) that the selected company has changed.\n    // Then, revert all colors to black in case of previous clicks and remain the color of the current selection.\n    // Then, call the Plotly. restyle function to update the plot.\n\n    // clickScatterPlot() {\n    //   var that = this\n    //   var myPlot = document.getElementById('myScatterPlot')\n    //   myPlot.on('plotly_click', function (data) {\n    //     for (var i = 0; i < data.points.length; i++) {\n    //\n    //       // Get the index of point and retrieve the associated company name\n    //       var pn = data.points[i].pointNumber;\n    //       var companyName = that.ScatterPlotData.name[pn];\n    //\n    //       // Emit event to change the currently selected company with the company name\n    //       that.$emit('changeCurrentlySelectedCompany', companyName);\n    //\n    //\n    //       // get the index of point\n    //       // pn = data.points[i].pointNumber;\n    //\n    //       // emit event to change the currently selected company in the a) configuration panel\n    //       // and b) update the Profit View\n    //       // that.$emit('changeCurrentlySelectedCompany', pn + 1)\n    //\n    //       // revert all colors\n    //       var colors = ['#00000' * 15]\n    //\n    //       // and change currently selected color to blue\n    //       colors[pn] = '#3777ee';\n    //\n    //       // update the marker and plot\n    //       var update = {'marker': {color: colors, size: 12}};\n    //       Plotly.restyle('myScatterPlot', update);\n    //     }\n    //   });\n    // }\n\n    clickScatterPlot() {\n      var that = this;\n      var myPlot = document.getElementById('myScatterPlot');\n      var originalColors = [...this.ScatterPlotData.color]; // Store original colors\n\n      myPlot.on('plotly_click', function (data) {\n        var clickedIndices = data.points.map(point => point.pointNumber);\n        \n        for (var i = 0; i < data.points.length; i++) {\n          // Get the index of point and retrieve the associated company name\n          var pn = data.points[i].pointNumber;\n          var companyName = that.ScatterPlotData.name[pn];\n\n          // Emitting an event to change the currently selected company in the configuration panel\n          that.$emit('changeCurrentlySelectedCompany', companyName); // Emitting the event\n\n          // Change all unclicked points to black\n          var colors = originalColors.map((color, index) => {\n            return clickedIndices.includes(index) ? color : '#000000';\n          });\n\n          var update = {'marker': { color: colors, size: 12 }};\n          Plotly.restyle('myScatterPlot', update);\n        }\n      });\n    }\n\n\n  },\n  // \"watch\" the selectedCategory prop for changes and, when it changes, re-fetch the data and redraw the scatterplot\n  watch: {\n    selectedCategory: function () {\n      this.ScatterPlotData.x = [];\n      this.ScatterPlotData.y = [];\n      this.ScatterPlotData.name = [];\n      this.ScatterPlotData.color = []; // Reset the color array when the category changes\n      this.fetchData();\n    }\n  }\n}\n</script>\n\n\n\n\n<style scoped>\n\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}