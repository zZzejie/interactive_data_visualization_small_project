{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"height\": \"90vh\"\n  }\n}, [/*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"myScatterPlot\",\n  style: {\n    \"height\": \"inherit\"\n  }\n})], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_row = _resolveComponent(\"v-row\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_v_row, {\n    align: \"center\",\n    justify: \"center\",\n    class: \"mt-1 mb-0\"\n  }, {\n    default: _withCtx(() => [_createElementVNode(\"h3\", null, \"Overview of \" + _toDisplayString(_ctx.$props.selectedCategory) + \" Companies\", 1 /* TEXT */)]),\n\n    _: 1 /* STABLE */\n  }), _hoisted_1]);\n}","map":{"version":3,"names":["_createElementVNode","style","id","_createElementBlock","_createVNode","_component_v_row","align","justify","class","_toDisplayString","_ctx","$props","selectedCategory","_hoisted_1"],"sources":["/Users/zoe/Desktop/IVDA/Assignments/example-project/hello-world/services/frontend/src/components/ScatterPlot.vue"],"sourcesContent":["<template>\n  <div>\n    <v-row align=\"center\" justify=\"center\" class=\"mt-1 mb-0\">\n      <h3>Overview of {{ $props.selectedCategory }} Companies</h3>\n    </v-row>\n    <div style=\"height: 90vh\">\n      <div id='myScatterPlot' style=\"height: inherit\"></div>\n    </div>\n  </div>\n</template>\n\n\n\n\n<script>\nimport Plotly from 'plotly.js/dist/plotly';\nexport default {\n  name: \"ScatterPlot\",\n  props: [\n    \"selectedCategory\"\n  ],\n  data: () => ({\n    ScatterPlotData: {x: [], y: [], name: [], color: []}, // Add a color array to the data\n    categoryColors: { // Define colors for each category\n      bank: '#3498db',   // blue\n      tech: '#2ecc71',   // green\n      health: '#e74c3c'  // red\n    }\n  }),\n  mounted() {\n    this.fetchData()\n  },\n  methods: {\n    async fetchData() {\n      // req URL to retrieve companies from backend\n      var reqUrl = 'http://127.0.0.1:5000/companies?category=' + this.$props.selectedCategory\n      console.log('ReqURL ' + reqUrl)\n      // await response and data\n      const response = await fetch(reqUrl)\n      const responseData = await response.json();\n\n      responseData.forEach((company) => {\n        const categoryColor = this.categoryColors[company.category] || '#000000'; // Get the color for the category or black if not defined\n        this.ScatterPlotData.name.push(company.name);\n        this.ScatterPlotData.x.push(company.founding_year);\n        this.ScatterPlotData.y.push(company.employees);\n        this.ScatterPlotData.color.push(categoryColor); // push the color to the color array for each company\n      });\n      // after the data is loaded, draw the plot\n      this.drawScatterPlot()\n    },\n    drawScatterPlot() {\n      var trace1 = {\n        x: this.ScatterPlotData.x,\n        y: this.ScatterPlotData.y,\n        mode: 'markers',\n        type: 'scatter',\n        text: this.ScatterPlotData.name,\n        marker: {\n          // Add a marker that sets the color for each company based on the category color\n          color: this.ScatterPlotData.color,\n          size: 12\n        },\n        legendgroup: 'Companies',  // Group for legend\n        name: 'Companies'           // Legend name\n      };\n      // Call a method after creating the plot which is responsible to handle the click events.\n      var data = [trace1];\n      var layout = {\n        // Add axis titles\n        xaxis: {\n          title: 'Founding Years',\n          showgrid: false,\n          zeroline: false\n        },\n        yaxis: {\n          title: 'Employees',\n          showline: false\n        },\n        // Add legend settings to the layout object\n        legend: {\n          tracegroupgap: 10,  // Gap between legend entries\n          itemsizing: 'constant'  // Legend item size is constant\n        }\n      };\n      var config = {responsive: true, displayModeBar: false}\n      Plotly.newPlot('myScatterPlot', data, layout, config);\n      this.clickScatterPlot()\n    },\n    // Upon a click, retrieve the point number and then emit an event with (pn+1 = company id).\n    // *NEW* Use this index to retrieve the company name associated with that point from your data and emit that as part of the event.\n    // Emitting an event will notify the parent (configuration panel) that the selected company has changed.\n    // Then, revert all colors to black in case of previous clicks and change the current selection to blue.\n    // Then, call the Plotly. restyle function to update the plot.\n\n    // clickScatterPlot() {\n    //   var that = this\n    //   var myPlot = document.getElementById('myScatterPlot')\n    //   myPlot.on('plotly_click', function (data) {\n    //     for (var i = 0; i < data.points.length; i++) {\n    //\n    //       // Get the index of point and retrieve the associated company name\n    //       var pn = data.points[i].pointNumber;\n    //       var companyName = that.ScatterPlotData.name[pn];\n    //\n    //       // Emit event to change the currently selected company with the company name\n    //       that.$emit('changeCurrentlySelectedCompany', companyName);\n    //\n    //\n    //       // get the index of point\n    //       // pn = data.points[i].pointNumber;\n    //\n    //       // emit event to change the currently selected company in the a) configuration panel\n    //       // and b) update the Profit View\n    //       // that.$emit('changeCurrentlySelectedCompany', pn + 1)\n    //\n    //       // revert all colors\n    //       var colors = ['#00000' * 15]\n    //\n    //       // and change currently selected color to blue\n    //       colors[pn] = '#3777ee';\n    //\n    //       // update the marker and plot\n    //       var update = {'marker': {color: colors, size: 12}};\n    //       Plotly.restyle('myScatterPlot', update);\n    //     }\n    //   });\n    // }\n\n    clickScatterPlot() {\n      var that = this;\n      var myPlot = document.getElementById('myScatterPlot');\n      var originalColors = [...this.ScatterPlotData.color]; // Store original colors\n\n      myPlot.on('plotly_click', function (data) {\n        var clickedIndices = data.points.map(point => point.pointNumber);\n\n        // Change all unclicked points to black\n        var colors = originalColors.map((color, index) => {\n          return clickedIndices.includes(index) ? color : '#000000';\n        });\n\n        // for (var i = 0; i < data.points.length; i++) {\n        //   var pn = data.points[i].pointNumber;\n        //   var companyName = that.ScatterPlotData.name[pn];\n        //   that.$emit('changeCurrentlySelectedCompany', companyName);\n        // }\n        for (var i = 0; i < data.points.length; i++) {\n          // Get the index of point and retrieve the associated company name\n          var pn = data.points[i].pointNumber;\n          var companyName = that.ScatterPlotData.name[pn];\n\n          // Emitting an event to change the currently selected company in the configuration panel\n          that.$emit('changeCurrentlySelectedCompany', companyName); // Emitting the event\n\n          // get the index of point\n          pn = data.points[i].pointNumber;\n\n          // emit event to change the currently selected company in the a) configuration panel\n\n          // Assuming you have a method to update the Profit View, call it here with the selected company name and b) update the Profit View\n          that.$emit('changeCurrentlySelectedCompany', pn + 1)\n\n          var update = {'marker': { color: colors, size: 12 }};\n          Plotly.restyle('myScatterPlot', update);\n        }\n\n\n        //\n        //\n        //       // get the index of point\n        //       // pn = data.points[i].pointNumber;\n        //\n        //       // emit event to change the currently selected company in the a) configuration panel\n        //       // and b) update the Profit View\n        //       // that.$emit('changeCurrentlySelectedCompany', pn + 1)\n\n      });\n    }\n\n\n  },\n  // \"watch\" the selectedCategory prop for changes and, when it changes, re-fetch the data and redraw the scatterplot\n  watch: {\n    selectedCategory: function () {\n      this.ScatterPlotData.x = [];\n      this.ScatterPlotData.y = [];\n      this.ScatterPlotData.name = [];\n      this.ScatterPlotData.color = []; // Reset the color array when the category changes\n      this.fetchData();\n    }\n  }\n}\n</script>\n\n\n\n\n<style scoped>\n\n</style>"],"mappings":";gCAKIA,mBAAA,CAEM;EAFDC,KAAoB,EAApB;IAAA;EAAA;AAAoB,I,aACvBD,mBAAA,CAAsD;EAAjDE,EAAE,EAAC,eAAe;EAACD,KAAuB,EAAvB;IAAA;EAAA;;;;;uBAL5BE,mBAAA,CAOM,cANJC,YAAA,CAEQC,gBAAA;IAFDC,KAAK,EAAC,QAAQ;IAACC,OAAO,EAAC,QAAQ;IAACC,KAAK,EAAC;;sBAC3C,MAA4D,CAA5DR,mBAAA,CAA4D,YAAxD,cAAY,GAAAS,gBAAA,CAAGC,IAAA,CAAAC,MAAM,CAACC,gBAAgB,IAAG,YAAU,gB;;;MAEzDC,UAEM,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}