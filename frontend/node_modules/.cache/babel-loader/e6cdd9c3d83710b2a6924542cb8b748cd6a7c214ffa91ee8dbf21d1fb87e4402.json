{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h3\", null, \"Profit View\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"height\": \"90vh\"\n  }\n}, [/*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"myLinePlot\",\n  style: {\n    \"height\": \"inherit\"\n  }\n})], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_row = _resolveComponent(\"v-row\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_v_row, {\n    align: \"center\",\n    justify: \"center\",\n    class: \"mt-1 mb-0\"\n  }, {\n    default: _withCtx(() => [_hoisted_1]),\n    _: 1 /* STABLE */\n  }), _hoisted_2]);\n}","map":{"version":3,"names":["_createElementVNode","style","id","_createElementBlock","_createVNode","_component_v_row","align","justify","class","_hoisted_1","_hoisted_2"],"sources":["/Users/zoe/Desktop/example-project/hello-world/services/frontend/src/components/LinePlot.vue"],"sourcesContent":["<template>\n  <div>\n    <v-row align=\"center\" justify=\"center\" class=\"mt-1 mb-0\">\n      <h3>Profit View</h3>\n    </v-row>\n    <div style=\"height: 90vh\">\n      <div id='myLinePlot' style=\"height: inherit\"></div>\n    </div>\n  </div>\n</template>\n\n\n\n<script>\nimport Plotly from 'plotly.js/dist/plotly';\nexport default {\n  name: \"LinePlot\",\n  data: () => ({\n    LinePlotData: {x: [], y: []}\n  }),\n  mounted() {\n    this.fetchData()\n  },\n  methods: {\n    async fetchData() {\n      // req URL to retrieve single company from backend\n      var reqUrl = 'http://127.0.0.1:5000/companies/1'\n      console.log(\"ReqURL \" + reqUrl)\n      // await response and data\n      const response = await fetch(reqUrl)\n      const responseData = await response.json();\n      // transform data to usable by lineplot\n      responseData.profit.forEach((profit) => {\n        this.LinePlotData.x.push(profit.year)\n        this.LinePlotData.y.push(profit.value)\n      })\n      // draw the lineplot after the data is transformed\n      this.drawLinePlot()\n    },\n    drawLinePlot() {\n      var trace1 = {\n        x: this.LinePlotData.x,\n        y: this.LinePlotData.y,\n        type: 'scatter'\n      };\n      var data = [trace1];\n      var layout = {}\n      var config = {responsive: true, displayModeBar: false}\n      Plotly.newPlot('myLinePlot', data, layout, config);\n\n    }\n  }\n}\n</script>\n\n\n\n\n<style scoped>\n\n</style>"],"mappings":";gCAGMA,mBAAA,CAAoB,YAAhB,aAAW;gCAEjBA,mBAAA,CAEM;EAFDC,KAAoB,EAApB;IAAA;EAAA;AAAoB,I,aACvBD,mBAAA,CAAmD;EAA9CE,EAAE,EAAC,YAAY;EAACD,KAAuB,EAAvB;IAAA;EAAA;;;;;uBALzBE,mBAAA,CAOM,cANJC,YAAA,CAEQC,gBAAA;IAFDC,KAAK,EAAC,QAAQ;IAACC,OAAO,EAAC,QAAQ;IAACC,KAAK,EAAC;;sBAC3C,MAAoB,CAApBC,UAAoB,C;;MAEtBC,UAEM,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}