{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Plotly from 'plotly.js/dist/plotly';\nexport default {\n  name: \"LinePlot\",\n  props: [\"selectedCompany\", \"selectedAlgorithm\"],\n  data: () => ({\n    LinePlotData: {\n      x: [],\n      y: []\n    }\n  }),\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    async fetchData() {\n      // req URL to retrieve single company from backend\n      var reqUrl = 'http://127.0.0.1:5000/companies/' + this.$props.selectedCompany + '?algorithm=' + this.$props.selectedAlgorithm;\n      console.log(\"ReqURL \" + reqUrl);\n\n      // await response and data\n      const response = await fetch(reqUrl);\n      const responseData = await response.json();\n\n      // transform data to usable by lineplot\n      responseData.profit.forEach(profit => {\n        this.LinePlotData.x.push(profit.year);\n        this.LinePlotData.y.push(profit.value);\n      });\n\n      // assign color and symbol based on year\n      this.LinePlotData.x.forEach(year => {\n        switch (year) {\n          case 2022:\n            this.LinePlotData.color.push(\"#DC4C64\");\n            this.LinePlotData.symbol.push(\"star-diamond\");\n            break;\n          default:\n            this.LinePlotData.color.push(\"#3B71CAFF\");\n            this.LinePlotData.symbol.push(\"circle\");\n        }\n      });\n\n      // draw the lineplot after the data is transformed\n      this.drawLinePlot();\n    },\n    drawLinePlot() {\n      var trace = {\n        x: this.LinePlotData.x,\n        y: this.LinePlotData.y,\n        type: 'scatter',\n        mode: 'lines+markers',\n        line: {\n          color: this.LinePlotData.x.map(year => {\n            // Check if the year is 2022, mark it as red, otherwise, use blue\n            return year === 2022 ? '#DC4C64' : year > 2021 ? '#DC4C64' : '#3B71CA';\n          }),\n          width: 2\n        }\n      };\n      var data = [trace];\n      var layout = {\n        // add axis titles\n        xaxis: {\n          title: 'Years',\n          showgrid: false,\n          zeroline: false\n        },\n        yaxis: {\n          title: 'Profit',\n          showline: false\n        }\n      };\n      var config = {\n        responsive: true,\n        displayModeBar: false\n      };\n      Plotly.newPlot('myLinePlot', data, layout, config);\n    }\n  },\n  watch: {\n    selectedCompany() {\n      this.LinePlotData.x = [];\n      this.LinePlotData.y = [];\n      this.fetchData();\n    },\n    selectedAlgorithm() {\n      // this.LinePlotData.x = [];\n      // this.LinePlotData.y = [];\n      //\n      // this.fetchData();\n      // this.drawLinePlot(); // Update the plot when the algorithm changes\n      this.refetchData();\n    }\n  }\n};","map":{"version":3,"names":["Plotly","name","props","data","LinePlotData","x","y","mounted","fetchData","methods","reqUrl","$props","selectedCompany","selectedAlgorithm","console","log","response","fetch","responseData","json","profit","forEach","push","year","value","color","symbol","drawLinePlot","trace","type","mode","line","map","width","layout","xaxis","title","showgrid","zeroline","yaxis","showline","config","responsive","displayModeBar","newPlot","watch","refetchData"],"sources":["/Users/zoe/Desktop/IVDA/Assignments/example-project/hello-world/services/frontend/src/components/LinePlot.vue"],"sourcesContent":["<template>\n  <div>\n    <v-row align=\"center\" justify=\"center\" class=\"mt-1 mb-0\">\n      <h3>Profit View of Company: {{ $props.selectedCompany }}</h3>\n    </v-row>\n    <div style=\"height: 90vh\">\n      <div id='myLinePlot' style=\"height: inherit\"></div>\n    </div>\n  </div>\n</template>\n\n\n\n\n<script>\nimport Plotly from 'plotly.js/dist/plotly';\nexport default {\n  name: \"LinePlot\",\n  props: [\"selectedCompany\", \"selectedAlgorithm\"],\n  data: () => ({\n    LinePlotData: {x: [], y: []}\n  }),\n  mounted() {\n    this.fetchData()\n  },\n  methods: {\n    async fetchData() {\n      // req URL to retrieve single company from backend\n      var reqUrl = 'http://127.0.0.1:5000/companies/' + this.$props.selectedCompany +\n          '?algorithm=' + this.$props.selectedAlgorithm\n      console.log(\"ReqURL \" + reqUrl)\n\n      // await response and data\n      const response = await fetch(reqUrl)\n      const responseData = await response.json();\n\n      // transform data to usable by lineplot\n      responseData.profit.forEach((profit) => {\n        this.LinePlotData.x.push(profit.year)\n        this.LinePlotData.y.push(profit.value)\n      })\n\n      // assign color and symbol based on year\n      this.LinePlotData.x.forEach((year) => {\n        switch (year) {\n          case 2022:\n            this.LinePlotData.color.push(\"#DC4C64\")\n            this.LinePlotData.symbol.push(\"star-diamond\")\n            break;\n          default:\n            this.LinePlotData.color.push(\"#3B71CAFF\")\n            this.LinePlotData.symbol.push(\"circle\")\n        }\n      })\n\n      // draw the lineplot after the data is transformed\n      this.drawLinePlot()\n    },\n\n    drawLinePlot() {\n      var trace = {\n        x: this.LinePlotData.x,\n        y: this.LinePlotData.y,\n        type: 'scatter',\n        mode: 'lines+markers',\n        line: {\n          color: this.LinePlotData.x.map((year) => {\n            // Check if the year is 2022, mark it as red, otherwise, use blue\n            return year === 2022 ? '#DC4C64' : (year > 2021 ? '#DC4C64' : '#3B71CA');\n          }),\n          width: 2\n        }\n      };\n\n      var data = [trace];\n\n      var layout = {\n        // add axis titles\n        xaxis: {\n          title: 'Years',\n          showgrid: false,\n          zeroline: false\n        },\n        yaxis: {\n          title: 'Profit',\n          showline: false\n        }\n      };\n\n      var config = { responsive: true, displayModeBar: false };\n      Plotly.newPlot('myLinePlot', data, layout, config);\n    }\n\n\n\n  },\n  watch: {\n    selectedCompany() {\n      this.LinePlotData.x = [];\n      this.LinePlotData.y = [];\n\n      this.fetchData();\n    },\n    selectedAlgorithm() {\n      // this.LinePlotData.x = [];\n      // this.LinePlotData.y = [];\n      //\n      // this.fetchData();\n      // this.drawLinePlot(); // Update the plot when the algorithm changes\n      this.refetchData();\n    },\n  }\n}\n</script>\n\n\n\n\n<style scoped>\n\n</style>"],"mappings":";AAeA,OAAOA,MAAK,MAAO,uBAAuB;AAC1C,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,KAAK,EAAE,CAAC,iBAAiB,EAAE,mBAAmB,CAAC;EAC/CC,IAAI,EAAEA,CAAA,MAAO;IACXC,YAAY,EAAE;MAACC,CAAC,EAAE,EAAE;MAAEC,CAAC,EAAE;IAAE;EAC7B,CAAC,CAAC;EACFC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,SAAS,CAAC;EACjB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,SAASA,CAAA,EAAG;MAChB;MACA,IAAIE,MAAK,GAAI,kCAAiC,GAAI,IAAI,CAACC,MAAM,CAACC,eAAc,GACxE,aAAY,GAAI,IAAI,CAACD,MAAM,CAACE,iBAAgB;MAChDC,OAAO,CAACC,GAAG,CAAC,SAAQ,GAAIL,MAAM;;MAE9B;MACA,MAAMM,QAAO,GAAI,MAAMC,KAAK,CAACP,MAAM;MACnC,MAAMQ,YAAW,GAAI,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;MAE1C;MACAD,YAAY,CAACE,MAAM,CAACC,OAAO,CAAED,MAAM,IAAK;QACtC,IAAI,CAAChB,YAAY,CAACC,CAAC,CAACiB,IAAI,CAACF,MAAM,CAACG,IAAI;QACpC,IAAI,CAACnB,YAAY,CAACE,CAAC,CAACgB,IAAI,CAACF,MAAM,CAACI,KAAK;MACvC,CAAC;;MAED;MACA,IAAI,CAACpB,YAAY,CAACC,CAAC,CAACgB,OAAO,CAAEE,IAAI,IAAK;QACpC,QAAQA,IAAI;UACV,KAAK,IAAI;YACP,IAAI,CAACnB,YAAY,CAACqB,KAAK,CAACH,IAAI,CAAC,SAAS;YACtC,IAAI,CAAClB,YAAY,CAACsB,MAAM,CAACJ,IAAI,CAAC,cAAc;YAC5C;UACF;YACE,IAAI,CAAClB,YAAY,CAACqB,KAAK,CAACH,IAAI,CAAC,WAAW;YACxC,IAAI,CAAClB,YAAY,CAACsB,MAAM,CAACJ,IAAI,CAAC,QAAQ;QAC1C;MACF,CAAC;;MAED;MACA,IAAI,CAACK,YAAY,CAAC;IACpB,CAAC;IAEDA,YAAYA,CAAA,EAAG;MACb,IAAIC,KAAI,GAAI;QACVvB,CAAC,EAAE,IAAI,CAACD,YAAY,CAACC,CAAC;QACtBC,CAAC,EAAE,IAAI,CAACF,YAAY,CAACE,CAAC;QACtBuB,IAAI,EAAE,SAAS;QACfC,IAAI,EAAE,eAAe;QACrBC,IAAI,EAAE;UACJN,KAAK,EAAE,IAAI,CAACrB,YAAY,CAACC,CAAC,CAAC2B,GAAG,CAAET,IAAI,IAAK;YACvC;YACA,OAAOA,IAAG,KAAM,IAAG,GAAI,SAAQ,GAAKA,IAAG,GAAI,IAAG,GAAI,SAAQ,GAAI,SAAU;UAC1E,CAAC,CAAC;UACFU,KAAK,EAAE;QACT;MACF,CAAC;MAED,IAAI9B,IAAG,GAAI,CAACyB,KAAK,CAAC;MAElB,IAAIM,MAAK,GAAI;QACX;QACAC,KAAK,EAAE;UACLC,KAAK,EAAE,OAAO;UACdC,QAAQ,EAAE,KAAK;UACfC,QAAQ,EAAE;QACZ,CAAC;QACDC,KAAK,EAAE;UACLH,KAAK,EAAE,QAAQ;UACfI,QAAQ,EAAE;QACZ;MACF,CAAC;MAED,IAAIC,MAAK,GAAI;QAAEC,UAAU,EAAE,IAAI;QAAEC,cAAc,EAAE;MAAM,CAAC;MACxD3C,MAAM,CAAC4C,OAAO,CAAC,YAAY,EAAEzC,IAAI,EAAE+B,MAAM,EAAEO,MAAM,CAAC;IACpD;EAIF,CAAC;EACDI,KAAK,EAAE;IACLjC,eAAeA,CAAA,EAAG;MAChB,IAAI,CAACR,YAAY,CAACC,CAAA,GAAI,EAAE;MACxB,IAAI,CAACD,YAAY,CAACE,CAAA,GAAI,EAAE;MAExB,IAAI,CAACE,SAAS,CAAC,CAAC;IAClB,CAAC;IACDK,iBAAiBA,CAAA,EAAG;MAClB;MACA;MACA;MACA;MACA;MACA,IAAI,CAACiC,WAAW,CAAC,CAAC;IACpB;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}