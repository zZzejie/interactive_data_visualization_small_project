{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Plotly from 'plotly.js/dist/plotly';\nexport default {\n  name: \"BarChart\",\n  props: [\"selectedCategory\", \"selectedCompany\", \"averageEmployeeCount\"],\n  data: () => ({\n    BarChartData: {\n      x: [],\n      y: []\n    }\n  }),\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    async fetchData() {\n      // req URL to retrieve companies from backend\n      var reqUrl = 'http://127.0.0.1:5000/companies?category=' + this.$props.selectedCategory;\n      console.log('ReqURL ' + reqUrl);\n      // await response and data\n      const response = await fetch(reqUrl);\n      const responseData = await response.json();\n      responseData.forEach(company => {\n        this.BarChartData.x.push(company.name);\n        this.BarChartData.y.push(company.employees);\n      });\n      // after the data is loaded, draw the plot\n      this.drawBarChart();\n    },\n    drawBarChart() {\n      var trace1 = {\n        x: this.ScatterPlotData.x,\n        y: this.ScatterPlotData.y,\n        mode: 'markers',\n        type: 'scatter',\n        text: this.ScatterPlotData.name,\n        marker: {\n          color: this.ScatterPlotData.color,\n          // Use the color data for markers\n          size: 12\n        },\n        legendgroup: 'Companies',\n        // Group for legend\n        name: 'Companies' // Legend name\n      };\n      // Call a method after creating the plot which is responsible to handle the click events.\n      var data = [trace1];\n      var layout = {\n        // Add axis titles\n        xaxis: {\n          title: 'Founding Years',\n          showgrid: false,\n          zeroline: false\n        },\n        yaxis: {\n          title: 'Employees',\n          showline: false\n        },\n        // Add legend settings to the layout object\n        legend: {\n          tracegroupgap: 10,\n          // Gap between legend entries\n          itemsizing: 'constant' // Legend item size is constant\n        }\n      };\n\n      var config = {\n        responsive: true,\n        displayModeBar: false\n      };\n      Plotly.newPlot('myScatterPlot', data, layout, config);\n      this.clickScatterPlot();\n    },\n    // Upon a click, retrieve the point number and then emit an event with (pn+1 = company id).\n    // Emitting an event will notify the parent (configuration panel) that the selected company has changed.\n    // Then, revert all colors to black in case of previous clicks and change the current selection to blue.\n    // Then, call the Plotly. restyle function to update the plot.\n    clickScatterPlot() {\n      var pn = 0;\n      var that = this;\n      var myPlot = document.getElementById('myScatterPlot');\n      myPlot.on('plotly_click', function (data) {\n        for (var i = 0; i < data.points.length; i++) {\n          // get the index of point\n          pn = data.points[i].pointNumber;\n\n          // emit event to change the currently selected company in the a) configuration panel\n          // and b) update the Profit View\n          that.$emit('changeCurrentlySelectedCompany', pn + 1);\n\n          // revert all colors\n          var colors = ['#00000' * 15];\n\n          // and change currently selected color to blue\n          colors[pn] = '#3777ee';\n\n          // update the marker and plot\n          var update = {\n            'marker': {\n              color: colors,\n              size: 12\n            }\n          };\n          Plotly.restyle('myScatterPlot', update);\n        }\n      });\n    }\n  },\n  watch: {\n    selectedCategory: function () {\n      this.ScatterPlotData.x = [];\n      this.ScatterPlotData.y = [];\n      this.ScatterPlotData.name = [];\n      this.ScatterPlotData.color = []; // Reset the color array when the category changes\n      this.fetchData();\n    }\n  }\n};","map":{"version":3,"names":["Plotly","name","props","data","BarChartData","x","y","mounted","fetchData","methods","reqUrl","$props","selectedCategory","console","log","response","fetch","responseData","json","forEach","company","push","employees","drawBarChart","trace1","ScatterPlotData","mode","type","text","marker","color","size","legendgroup","layout","xaxis","title","showgrid","zeroline","yaxis","showline","legend","tracegroupgap","itemsizing","config","responsive","displayModeBar","newPlot","clickScatterPlot","pn","that","myPlot","document","getElementById","on","i","points","length","pointNumber","$emit","colors","update","restyle","watch"],"sources":["/Users/zoe/Desktop/example-project/hello-world/services/frontend/src/components/BarChart.vue"],"sourcesContent":["<template>\n  <div>\n    <v-row align=\"center\" justify=\"center\" class=\"mt-1 mb-0\">\n      <h3>Employee Comparison in {{ $props.selectedCategory }}</h3>\n    </v-row>\n    <div style=\"height: 90vh\">\n      <div id='myBarChart' style=\"height: inherit\"></div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Plotly from 'plotly.js/dist/plotly';\nexport default {\n  name: \"BarChart\",\n  props: [\"selectedCategory\", \"selectedCompany\", \"averageEmployeeCount\"],\n  data: () => ({\n    BarChartData: {x: [], y: []},\n\n  }),\n  mounted() {\n    this.fetchData()\n  },\n  methods: {\n    async fetchData() {\n      // req URL to retrieve companies from backend\n      var reqUrl = 'http://127.0.0.1:5000/companies?category=' + this.$props.selectedCategory\n      console.log('ReqURL ' + reqUrl)\n      // await response and data\n      const response = await fetch(reqUrl)\n      const responseData = await response.json();\n\n      responseData.forEach((company) => {\n        this.BarChartData.x.push(company.name);\n        this.BarChartData.y.push(company.employees);\n      });\n      // after the data is loaded, draw the plot\n      this.drawBarChart()\n    },\n    drawBarChart() {\n      var trace1 = {\n        x: this.ScatterPlotData.x,\n        y: this.ScatterPlotData.y,\n        mode: 'markers',\n        type: 'scatter',\n        text: this.ScatterPlotData.name,\n        marker: {\n          color: this.ScatterPlotData.color,  // Use the color data for markers\n          size: 12\n        },\n        legendgroup: 'Companies',  // Group for legend\n        name: 'Companies'           // Legend name\n      };\n      // Call a method after creating the plot which is responsible to handle the click events.\n      var data = [trace1];\n      var layout = {\n        // Add axis titles\n        xaxis: {\n          title: 'Founding Years',\n          showgrid: false,\n          zeroline: false\n        },\n        yaxis: {\n          title: 'Employees',\n          showline: false\n        },\n        // Add legend settings to the layout object\n        legend: {\n          tracegroupgap: 10,  // Gap between legend entries\n          itemsizing: 'constant'  // Legend item size is constant\n        }\n      };\n      var config = {responsive: true, displayModeBar: false}\n      Plotly.newPlot('myScatterPlot', data, layout, config);\n      this.clickScatterPlot()\n    },\n    // Upon a click, retrieve the point number and then emit an event with (pn+1 = company id).\n    // Emitting an event will notify the parent (configuration panel) that the selected company has changed.\n    // Then, revert all colors to black in case of previous clicks and change the current selection to blue.\n    // Then, call the Plotly. restyle function to update the plot.\n    clickScatterPlot() {\n      var pn = 0\n      var that = this\n      var myPlot = document.getElementById('myScatterPlot')\n      myPlot.on('plotly_click', function (data) {\n        for (var i = 0; i < data.points.length; i++) {\n\n          // get the index of point\n          pn = data.points[i].pointNumber;\n\n          // emit event to change the currently selected company in the a) configuration panel\n          // and b) update the Profit View\n          that.$emit('changeCurrentlySelectedCompany', pn + 1)\n\n          // revert all colors\n          var colors = ['#00000' * 15]\n\n          // and change currently selected color to blue\n          colors[pn] = '#3777ee';\n\n          // update the marker and plot\n          var update = {'marker': {color: colors, size: 12}};\n          Plotly.restyle('myScatterPlot', update);\n        }\n      });\n    }\n  },\n  watch: {\n    selectedCategory: function () {\n      this.ScatterPlotData.x = [];\n      this.ScatterPlotData.y = [];\n      this.ScatterPlotData.name = [];\n      this.ScatterPlotData.color = []; // Reset the color array when the category changes\n      this.fetchData();\n    }\n  }\n}\n</script>\n\n\n<style scoped>\n\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}